[{"categories":null,"content":"As a DevOps Engineer, I like being able to create quick and simple CLI’s to automate toil. After lots of playing around with python dependency management, cli library’s I think I have found a nice combination. This is the stack: click The cli library poetry The dependency management pytest who does not love writing tests precommit - Sane checking before we commit ","date":"02-08-2022","objectID":"/click_project_setup/:0:0","series":null,"tags":["click","poetry"],"title":"How to Create a Python CLI Package In 2022","uri":"/click_project_setup/#"},{"categories":null,"content":"PoetryI have used lots of dependency managers in my time, and I have recently started to use poetry and it takes all the hassle out of everything. To install it go here and run the command. ","date":"02-08-2022","objectID":"/click_project_setup/:1:0","series":null,"tags":["click","poetry"],"title":"How to Create a Python CLI Package In 2022","uri":"/click_project_setup/#poetry"},{"categories":null,"content":"Starting A ProjectNow we have poetry installed we can create the base for our project: poetry new --name hello --src helloworld This will create a helloworld dir, with the following contents: helloworld ├── README.rst ├── pyproject.toml ├── src │ └── hello │ └── __init__.py └── tests ├── __init__.py └── test_hello.py ","date":"02-08-2022","objectID":"/click_project_setup/:2:0","series":null,"tags":["click","poetry"],"title":"How to Create a Python CLI Package In 2022","uri":"/click_project_setup/#starting-a-project"},{"categories":null,"content":"Adding DependenciesSince we know we are going to be using click \u0026 lets tell poetry to add it: cd helloworld poetry add click ","date":"02-08-2022","objectID":"/click_project_setup/:2:1","series":null,"tags":["click","poetry"],"title":"How to Create a Python CLI Package In 2022","uri":"/click_project_setup/#adding-dependencies"},{"categories":null,"content":"Adding an Entry PointBack in the day we would use a setup.py file to do this, but again poetry does all the hard work for us. We need to add a tool.poetry.scripts setting to our pyproject.toml [tool.poetry.scripts] hello = \"src.hello.main:cli\" hello = The name of the cli when we run it. src.hello. = The name of the package main = The name of the module cli = The name of the function ","date":"02-08-2022","objectID":"/click_project_setup/:2:2","series":null,"tags":["click","poetry"],"title":"How to Create a Python CLI Package In 2022","uri":"/click_project_setup/#adding-an-entry-point"},{"categories":null,"content":"Adding the codeSince we do not have any of the code needed above, poetry cannot / will not run our cli. Lets fix that, add the following code to src/hello/main.py Here is the link to the Gist ","date":"02-08-2022","objectID":"/click_project_setup/:2:3","series":null,"tags":["click","poetry"],"title":"How to Create a Python CLI Package In 2022","uri":"/click_project_setup/#adding-the-code"},{"categories":null,"content":"Running the scriptNow if we run poetry run hello we should see this: Usage: hello [OPTIONS] COMMAND [ARGS]... Run the cli Options: -v, --verbose Enable verbose output --help Show this message and exit. Commands: say This greets you. Or this poetry run hello say --string foo --repeat 4: Hello foo! Hello foo! Hello foo! Hello foo! ","date":"02-08-2022","objectID":"/click_project_setup/:3:0","series":null,"tags":["click","poetry"],"title":"How to Create a Python CLI Package In 2022","uri":"/click_project_setup/#running-the-script"},{"categories":null,"content":"Saving to GitNow that we have the boiler plate setup, its a good time to commit to git. git init git add * git commit -m \"First commit\" git branch -M main git remote add origin \u003cyour git url\u003e git push -u origin main ","date":"02-08-2022","objectID":"/click_project_setup/:4:0","series":null,"tags":["click","poetry"],"title":"How to Create a Python CLI Package In 2022","uri":"/click_project_setup/#saving-to-git"},{"categories":null,"content":"Pre-commit HooksAdd it as a dependency: poetry add pre-commit pylint Don’t forget to update git! git add poetry.lock pyproject.toml git commit -m \"Add pre-commit dependency.\" This is my basic .pre-commit-config.yaml file: repos:- repo:https://github.com/pre-commit/pre-commit-hooksrev:v2.5.0hooks:- id:check-added-large-files- repo:localhooks:- id:pylintname:pylintentry:poetry run pylint src/language:systemalways_run:truepass_filenames:false We need to init the hooks: poetry run pre-commit install Once we have init’d the pre-commit hooks will run when we commit code. For more info on pre-commit click here ","date":"02-08-2022","objectID":"/click_project_setup/:4:1","series":null,"tags":["click","poetry"],"title":"How to Create a Python CLI Package In 2022","uri":"/click_project_setup/#pre-commit-hooks"},{"categories":null,"content":"Uploading the packageLets say you have built your cli tool and want to upload it to PyPi! We should really test it before pushing to the prod PyPi right? ","date":"02-08-2022","objectID":"/click_project_setup/:5:0","series":null,"tags":["click","poetry"],"title":"How to Create a Python CLI Package In 2022","uri":"/click_project_setup/#uploading-the-package"},{"categories":null,"content":"Testing UploadFirst lets configure poetry so its aware of the test PyPi repo: poetry config repositories.testpypi https://test.pypi.org/legacy/ Create an account on TestPyPI and then create a new API key under your account settings. Once you have the key: poetry config http-basic.testpypi __token__ \u003cAPI KEY\u003e To upload you run: poetry build poetry publish -r testpypi Tip You can add dist to your .gitignore file ","date":"02-08-2022","objectID":"/click_project_setup/:5:1","series":null,"tags":["click","poetry"],"title":"How to Create a Python CLI Package In 2022","uri":"/click_project_setup/#testing-upload"},{"categories":null,"content":"References How to create a Python package in 2022 - Rodrigo Girão Serrão Build and Test a Command Line Interface with Python, Poetry, Click, and pytest - Jonathan Bowman ","date":"02-08-2022","objectID":"/click_project_setup/:0:0","series":null,"tags":["click","poetry"],"title":"How to Create a Python CLI Package In 2022","uri":"/click_project_setup/#references"},{"categories":null,"content":"Real Upload Configure PyPI Get your API key for PyPi poetry config pypi-token.pypi \u003cAPI KEY\u003e poetry publish --build ","date":"02-08-2022","objectID":"/click_project_setup/:0:1","series":null,"tags":["click","poetry"],"title":"How to Create a Python CLI Package In 2022","uri":"/click_project_setup/#real-upload"},{"categories":null,"content":"Hello! This is my Tech blog, where I am to write about techy things. To follow tradition I will be writing hello world in various languages I am competent in. One day I hope to add more languages. ","date":"22-04-2022","objectID":"/hello-world/:0:0","series":null,"tags":null,"title":"Hello World","uri":"/hello-world/#"},{"categories":null,"content":"Python print(\"Hello World\") ","date":"22-04-2022","objectID":"/hello-world/:1:0","series":null,"tags":null,"title":"Hello World","uri":"/hello-world/#python"},{"categories":null,"content":"Go import fmt package main func main() { fmt.Println(\"Hello World\") } ","date":"22-04-2022","objectID":"/hello-world/:2:0","series":null,"tags":null,"title":"Hello World","uri":"/hello-world/#go"},{"categories":null,"content":"Bash echo \"Hello World\" ","date":"22-04-2022","objectID":"/hello-world/:3:0","series":null,"tags":null,"title":"Hello World","uri":"/hello-world/#bash"},{"categories":null,"content":"Powershell Write-Host \"Hello World\" ","date":"22-04-2022","objectID":"/hello-world/:4:0","series":null,"tags":null,"title":"Hello World","uri":"/hello-world/#powershell"},{"categories":null,"content":"C++ #include \u003ciostream\u003e int main() { std::cout \u003c\u003c \"Hello World!\"; return 0; } ","date":"22-04-2022","objectID":"/hello-world/:5:0","series":null,"tags":null,"title":"Hello World","uri":"/hello-world/#c"},{"categories":null,"content":"AboutHello I am Karl W (Ktasper) You have found my site of what I think passes for a DevOps engineer / SRE’s daily life. Have a good dig around this site; explore the random snippets of code, posts, links and other stuff. If you find something you don’t like, then close your browser and or your internet connection. ","date":"01-01-0001","objectID":"/about/:0:0","series":null,"tags":null,"title":"About","uri":"/about/#about"},{"categories":null,"content":"Theme LicenseDoIt is licensed under the MIT license. Check the LICENSE file for details. Thanks to the authors of following resources included in the theme: normalize.css Font Awesome Simple Icons Animate.css autocomplete.js Lunr.js algoliasearch Fuse.js lazysizes object-fit-images Twemoji lightgallery.js clipboard.js Sharer.js TypeIt $ \\KaTeX $ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine Waline Twikoo Vssue cookieconsent Pjax Topbar Remark42 ","date":"01-01-0001","objectID":"/about/:0:0","series":null,"tags":null,"title":"About","uri":"/about/#theme-license"}]